#!/usr/bin/env python3
"""
Script para corrigir erro -18 (ESP_ERR_NOT_SUPPORTED) no BLE
Implementa estrat√©gias espec√≠ficas para resolver problemas de inicializa√ß√£o BLE
"""

import bluetooth
import time
import gc
import sys
sys.path.append('/common')

def force_ble_reset():
    """For√ßa um reset completo do BLE"""
    try:
        print("=== FOR√áA RESET DO BLE ===")
        
        # For√ßa garbage collection
        gc.collect()
        
        # Tenta desativar qualquer inst√¢ncia BLE existente
        try:
            ble = bluetooth.BLE()
            ble.active(False)
            print("BLE desativado")
        except:
            print("Nenhuma inst√¢ncia BLE ativa para desativar")
        
        # Aguarda tempo suficiente para reset completo
        time.sleep(2)
        
        # For√ßa mais garbage collection
        gc.collect()
        
        print("Reset do BLE conclu√≠do")
        return True
        
    except Exception as e:
        print(f"Erro no reset do BLE: {e}")
        return False

def test_ble_initialization_strategies():
    """Testa diferentes estrat√©gias de inicializa√ß√£o BLE"""
    
    strategies = [
        ("Inicializa√ß√£o Padr√£o", init_ble_standard),
        ("Inicializa√ß√£o com Delay Longo", init_ble_long_delay),
        ("Inicializa√ß√£o com Reset", init_ble_with_reset),
        ("Inicializa√ß√£o Conservadora", init_ble_conservative),
        ("Inicializa√ß√£o com Retry Exponencial", init_ble_exponential_retry),
    ]
    
    successful_strategy = None
    
    for strategy_name, strategy_func in strategies:
        print(f"\n=== TESTANDO: {strategy_name} ===")
        
        # Reset antes de cada teste
        force_ble_reset()
        time.sleep(1)
        
        try:
            ble = strategy_func()
            if ble:
                print(f"‚úì SUCESSO: {strategy_name}")
                successful_strategy = strategy_name
                ble.active(False)  # Limpa para pr√≥ximo teste
                break
            else:
                print(f"‚úó FALHA: {strategy_name}")
                
        except Exception as e:
            print(f"‚úó ERRO em {strategy_name}: {e}")
            if hasattr(e, 'errno') and e.errno == -18:
                print("   -> Erro -18 detectado (ESP_ERR_NOT_SUPPORTED)")
            
        time.sleep(1)
    
    return successful_strategy

def init_ble_standard():
    """Inicializa√ß√£o padr√£o"""
    ble = bluetooth.BLE()
    ble.active(True)
    time.sleep(0.5)
    return ble

def init_ble_long_delay():
    """Inicializa√ß√£o com delays longos"""
    ble = bluetooth.BLE()
    time.sleep(1)  # Delay antes de ativar
    ble.active(True)
    time.sleep(2)  # Delay ap√≥s ativar
    return ble

def init_ble_with_reset():
    """Inicializa√ß√£o com reset pr√©vio"""
    # Primeira inst√¢ncia s√≥ para garantir reset
    try:
        temp_ble = bluetooth.BLE()
        temp_ble.active(False)
        time.sleep(1)
    except:
        pass
    
    # Segunda inst√¢ncia para uso real
    ble = bluetooth.BLE()
    ble.active(True)
    time.sleep(1.5)
    return ble

def init_ble_conservative():
    """Inicializa√ß√£o conservadora com verifica√ß√µes"""
    ble = bluetooth.BLE()
    
    # Verifica se j√° est√° ativo
    try:
        if ble.active():
            print("BLE j√° estava ativo, desativando primeiro...")
            ble.active(False)
            time.sleep(1)
    except:
        pass
    
    # Ativa com delay
    ble.active(True)
    time.sleep(1)
    
    # Verifica se ativa√ß√£o foi bem-sucedida
    if not ble.active():
        raise Exception("Falha na ativa√ß√£o do BLE")
    
    return ble

def init_ble_exponential_retry():
    """Inicializa√ß√£o com retry exponencial"""
    max_retries = 5
    base_delay = 0.5
    
    for attempt in range(max_retries):
        try:
            print(f"Tentativa {attempt + 1}/{max_retries}")
            
            ble = bluetooth.BLE()
            
            # Delay exponencial
            delay = base_delay * (2 ** attempt)
            print(f"Aguardando {delay}s...")
            time.sleep(delay)
            
            ble.active(True)
            
            # Delay ap√≥s ativa√ß√£o tamb√©m exponencial
            post_delay = delay / 2
            time.sleep(post_delay)
            
            # Testa se realmente est√° funcionando
            if ble.active():
                print(f"BLE ativado na tentativa {attempt + 1}")
                return ble
            else:
                print(f"BLE n√£o ativou corretamente na tentativa {attempt + 1}")
                
        except Exception as e:
            print(f"Tentativa {attempt + 1} falhou: {e}")
            if attempt == max_retries - 1:
                raise e
            time.sleep(0.5)
    
    raise Exception("Todas as tentativas falharam")

def create_fixed_ble_module():
    """Cria um m√≥dulo BLE com a estrat√©gia que funcionou"""
    print("\n=== CRIANDO M√ìDULO BLE CORRIGIDO ===")
    
    # Testa estrat√©gias
    successful_strategy = test_ble_initialization_strategies()
    
    if not successful_strategy:
        print("‚ùå Nenhuma estrat√©gia funcionou!")
        return False
    
    print(f"\n‚úì Estrat√©gia bem-sucedida: {successful_strategy}")
    
    # Cria arquivo com a estrat√©gia que funcionou
    fixed_code = generate_fixed_ble_code(successful_strategy)
    
    with open('/home/felipe/work/display7segBluetooth/projeto/ble_fixed.py', 'w') as f:
        f.write(fixed_code)
    
    print("‚úì M√≥dulo BLE corrigido salvo em 'ble_fixed.py'")
    return True

def generate_fixed_ble_code(strategy_name):
    """Gera c√≥digo BLE corrigido baseado na estrat√©gia que funcionou"""
    
    code_templates = {
        "Inicializa√ß√£o Padr√£o": """
def init_ble_safe():
    ble = bluetooth.BLE()
    ble.active(True)
    time.sleep(0.5)
    return ble
""",
        
        "Inicializa√ß√£o com Delay Longo": """
def init_ble_safe():
    ble = bluetooth.BLE()
    time.sleep(1)
    ble.active(True)
    time.sleep(2)
    return ble
""",
        
        "Inicializa√ß√£o com Reset": """
def init_ble_safe():
    # Reset pr√©vio
    try:
        temp_ble = bluetooth.BLE()
        temp_ble.active(False)
        time.sleep(1)
    except:
        pass
    
    # Inicializa√ß√£o principal
    ble = bluetooth.BLE()
    ble.active(True)
    time.sleep(1.5)
    return ble
""",
        
        "Inicializa√ß√£o Conservadora": """
def init_ble_safe():
    ble = bluetooth.BLE()
    
    # Verifica estado anterior
    try:
        if ble.active():
            ble.active(False)
            time.sleep(1)
    except:
        pass
    
    # Ativa com verifica√ß√£o
    ble.active(True)
    time.sleep(1)
    
    if not ble.active():
        raise Exception("Falha na ativa√ß√£o do BLE")
    
    return ble
""",
        
        "Inicializa√ß√£o com Retry Exponencial": """
def init_ble_safe():
    max_retries = 5
    base_delay = 0.5
    
    for attempt in range(max_retries):
        try:
            ble = bluetooth.BLE()
            delay = base_delay * (2 ** attempt)
            time.sleep(delay)
            ble.active(True)
            time.sleep(delay / 2)
            
            if ble.active():
                return ble
                
        except Exception as e:
            if attempt == max_retries - 1:
                raise e
            time.sleep(0.5)
    
    raise Exception("Todas as tentativas falharam")
"""
    }
    
    template = code_templates.get(strategy_name, code_templates["Inicializa√ß√£o Padr√£o"])
    
    full_code = f'''"""
M√≥dulo BLE corrigido para erro -18
Estrat√©gia utilizada: {strategy_name}
Gerado automaticamente pelo script fix_ble_error18.py
"""

import bluetooth
import time
import gc

{template}

class SafeBLEWrapper:
    """Wrapper seguro para BLE que evita erro -18"""
    
    def __init__(self):
        self.ble = None
        self.is_active = False
    
    def initialize(self):
        """Inicializa BLE de forma segura"""
        try:
            # For√ßa garbage collection
            gc.collect()
            
            # Usa estrat√©gia que funcionou
            self.ble = init_ble_safe()
            self.is_active = True
            
            print(f"BLE inicializado com sucesso usando: {strategy_name}")
            return True
            
        except Exception as e:
            print(f"Erro ao inicializar BLE: {{e}}")
            self.is_active = False
            return False
    
    def get_ble(self):
        """Retorna inst√¢ncia BLE se inicializada"""
        if not self.is_active or not self.ble:
            raise Exception("BLE n√£o foi inicializado corretamente")
        return self.ble
    
    def cleanup(self):
        """Limpa recursos BLE"""
        if self.ble:
            try:
                self.ble.active(False)
            except:
                pass
        self.ble = None
        self.is_active = False
        gc.collect()

# Inst√¢ncia global para uso f√°cil
safe_ble = SafeBLEWrapper()
'''
    
    return full_code

def main():
    """Fun√ß√£o principal do script de corre√ß√£o"""
    print("=== SCRIPT DE CORRE√á√ÉO DO ERRO BLE -18 ===")
    print("Este script vai testar diferentes estrat√©gias de inicializa√ß√£o BLE")
    print("para resolver o erro ESP_ERR_NOT_SUPPORTED (-18)\n")
    
    try:
        # Executa testes e cria m√≥dulo corrigido
        if create_fixed_ble_module():
            print("\nüéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("\nPr√≥ximos passos:")
            print("1. Use o m√≥dulo 'ble_fixed.py' em seus projetos")
            print("2. Substitua a inicializa√ß√£o BLE padr√£o pela vers√£o corrigida")
            print("3. Teste no hardware real")
        else:
            print("\n‚ùå N√ÉO FOI POSS√çVEL CORRIGIR O PROBLEMA")
            print("Poss√≠veis causas:")
            print("- Firmware MicroPython incompat√≠vel")
            print("- Hardware ESP32 com BLE defeituoso")
            print("- Configura√ß√£o de sistema incorreta")
            
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE A CORRE√á√ÉO: {e}")

if __name__ == "__main__":
    main()
