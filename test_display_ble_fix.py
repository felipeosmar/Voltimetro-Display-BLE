# filepath: test_display_ble_fix.py
"""
Teste de corre√ß√£o para erro BLE -18 no ESP32 Display
Este script tenta diferentes estrat√©gias para inicializar o BLE
"""

import bluetooth
import time
from machine import Pin

def test_ble_initialization():
    """Testa diferentes estrat√©gias de inicializa√ß√£o BLE"""
    led = Pin(2, Pin.OUT)
    led.value(0)
    
    print("=== TESTE DE CORRE√á√ÉO BLE -18 ===")
    
    # Estrat√©gia 1: Inicializa√ß√£o b√°sica
    print("Estrat√©gia 1: Inicializa√ß√£o b√°sica...")
    try:
        ble = bluetooth.BLE()
        ble.active(True)
        time.sleep(1)
        print("‚úì Estrat√©gia 1: Sucesso")
        led.value(1)
        return ble
    except Exception as e:
        print(f"‚úó Estrat√©gia 1: Falhou - {e}")
    
    # Estrat√©gia 2: Reinicializa√ß√£o
    print("Estrat√©gia 2: Reinicializa√ß√£o...")
    try:
        ble = bluetooth.BLE()
        ble.active(False)
        time.sleep(0.5)
        ble.active(True)
        time.sleep(2)
        print("‚úì Estrat√©gia 2: Sucesso")
        led.value(1)
        return ble
    except Exception as e:
        print(f"‚úó Estrat√©gia 2: Falhou - {e}")
    
    # Estrat√©gia 3: M√∫ltiplas tentativas
    print("Estrat√©gia 3: M√∫ltiplas tentativas...")
    for attempt in range(5):
        try:
            print(f"  Tentativa {attempt + 1}/5...")
            ble = bluetooth.BLE()
            ble.active(False)
            time.sleep(0.2)
            ble.active(True)
            time.sleep(1 + attempt * 0.5)  # Tempo crescente
            print(f"‚úì Estrat√©gia 3: Sucesso na tentativa {attempt + 1}")
            led.value(1)
            return ble
        except Exception as e:
            print(f"  Tentativa {attempt + 1}: {e}")
            time.sleep(0.5)
    
    # Estrat√©gia 4: Reset completo
    print("Estrat√©gia 4: Reset completo...")
    try:
        import machine
        print("  Aguardando 3 segundos...")
        time.sleep(3)
        ble = bluetooth.BLE()
        ble.active(True)
        time.sleep(2)
        print("‚úì Estrat√©gia 4: Sucesso")
        led.value(1)
        return ble
    except Exception as e:
        print(f"‚úó Estrat√©gia 4: Falhou - {e}")
    
    print("‚ùå TODAS AS ESTRAT√âGIAS FALHARAM")
    print("Poss√≠veis causas:")
    print("1. Firmware MicroPython n√£o suporta BLE")
    print("2. Hardware BLE defeituoso")
    print("3. Conflito com WiFi (se ativo)")
    print("4. Mem√≥ria insuficiente")
    
    # Pisca LED em padr√£o de erro
    for _ in range(20):
        led.value(1)
        time.sleep(0.1)
        led.value(0)
        time.sleep(0.1)
    
    return None

def test_simple_advertising(ble):
    """Testa advertising simples se BLE funcionar"""
    if not ble:
        return False
    
    print("\n=== TESTE DE ADVERTISING ===")
    try:
        # Payload m√≠nimo
        payload = bytes([
            2, 0x01, 0x06,  # Flags: General Discoverable + BR/EDR Not Supported
            13, 0x09,       # Complete Local Name (12 chars + type)
        ]) + b"ESP32_Test"
        
        print(f"Payload: {len(payload)} bytes")
        print(f"Conte√∫do: {payload}")
        
        # Tenta advertising
        ble.gap_advertise(100, payload)
        print("‚úì Advertising iniciado com sucesso!")
        
        # Loop de teste
        for i in range(10):
            print(f"Advertising ativo: {i+1}/10")
            time.sleep(1)
        
        ble.gap_advertise(None)  # Para advertising
        print("‚úì Teste de advertising conclu√≠do")
        return True
        
    except Exception as e:
        print(f"‚úó Erro no advertising: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("Iniciando teste de corre√ß√£o BLE...")
    
    # Testa inicializa√ß√£o
    ble = test_ble_initialization()
    
    if ble:
        print("\nüéâ BLE INICIALIZADO COM SUCESSO!")
        # Testa advertising
        if test_simple_advertising(ble):
            print("\nüéâ TESTE COMPLETO REALIZADO COM SUCESSO!")
            print("O BLE est√° funcionando corretamente")
        else:
            print("\n‚ö†Ô∏è BLE inicializado mas advertising falhou")
    else:
        print("\n‚ùå FALHA TOTAL NA INICIALIZA√á√ÉO BLE")
        print("Verifique:")
        print("1. Firmware MicroPython com suporte BLE")
        print("2. Modelo do ESP32 (alguns n√£o t√™m BLE)")
        print("3. Mem√≥ria dispon√≠vel")

if __name__ == "__main__":
    main()
