#!/usr/bin/env python3
"""
Script de diagn√≥stico avan√ßado para o sistema BLE
"""

import serial
import time
import sys

def diagnose_esp32(port):
    """Diagn√≥stico completo do ESP32"""
    print(f"=== Diagn√≥stico ESP32 em {port} ===")
    
    try:
        # Teste de conex√£o b√°sica
        print("1. Testando conex√£o serial...")
        ser = serial.Serial(port, 115200, timeout=1)
        print("‚úì Conex√£o serial estabelecida")
        
        # Enviar Ctrl+C para interromper execu√ß√£o atual
        print("2. Enviando interrup√ß√£o (Ctrl+C)...")
        ser.write(b'\x03')
        time.sleep(0.5)
        
        # Limpar buffer
        ser.flushInput()
        
        # Enviar comando para reiniciar
        print("3. Reiniciando ESP32...")
        ser.write(b'\x04')  # Ctrl+D (soft reset)
        time.sleep(2)
        
        # Ler sa√≠da por 15 segundos
        print("4. Lendo sa√≠da do ESP32...")
        start_time = time.time()
        all_output = []
        
        while time.time() - start_time < 15:
            if ser.in_waiting:
                try:
                    line = ser.readline().decode('utf-8', errors='replace').strip()
                    if line:
                        all_output.append(line)
                        print(f"ESP32: {line}")
                except UnicodeDecodeError:
                    continue
            time.sleep(0.1)
        
        ser.close()
        
        # An√°lise da sa√≠da
        print("\n=== An√°lise do Output ===")
        if not all_output:
            print("‚úó Nenhuma sa√≠da detectada do ESP32")
            print("  Poss√≠veis causas:")
            print("  - ESP32 n√£o est√° conectado")
            print("  - C√≥digo n√£o foi carregado corretamente")
            print("  - ESP32 em estado de erro")
            return False
        
        # Verifica por erros comuns
        errors = []
        warnings = []
        success = []
        
        for line in all_output:
            line_lower = line.lower()
            if any(err in line_lower for err in ['error', 'traceback', 'exception', 'importerror']):
                errors.append(line)
            elif any(warn in line_lower for warn in ['warning', 'failed', 'timeout']):
                warnings.append(line)
            elif any(ok in line_lower for ok in ['iniciado', 'ativo', 'configurado', 'ready']):
                success.append(line)
        
        if errors:
            print("‚úó Erros detectados:")
            for error in errors:
                print(f"  {error}")
        
        if warnings:
            print("‚ö† Avisos detectados:")
            for warning in warnings:
                print(f"  {warning}")
        
        if success:
            print("‚úì Sucessos detectados:")
            for succ in success:
                print(f"  {succ}")
        
        # Status final
        if errors:
            print("\nüî¥ Status: ERRO - ESP32 com problemas cr√≠ticos")
            return False
        elif not success and warnings:
            print("\nüü° Status: ATEN√á√ÉO - ESP32 com avisos")
            return False
        elif success:
            print("\nüü¢ Status: OK - ESP32 funcionando")
            return True
        else:
            print("\nüü° Status: INDEFINIDO - Sa√≠da insuficiente para an√°lise")
            return False
            
    except serial.SerialException as e:
        print(f"‚úó Erro de conex√£o serial: {e}")
        print("  Verifique se:")
        print("  - O ESP32 est√° conectado")
        print("  - A porta est√° correta")
        print("  - Voc√™ tem permiss√µes na porta serial")
        return False
    except Exception as e:
        print(f"‚úó Erro durante diagn√≥stico: {e}")
        return False

def check_serial_permissions(port):
    """Verifica permiss√µes da porta serial"""
    print(f"=== Verificando permiss√µes de {port} ===")
    
    import os
    import stat
    
    try:
        # Verifica se o arquivo existe
        if not os.path.exists(port):
            print(f"‚úó Porta {port} n√£o existe")
            return False
        
        # Verifica permiss√µes
        st = os.stat(port)
        mode = st.st_mode
        
        # Verifica se √© leg√≠vel e grav√°vel pelo usu√°rio
        readable = bool(mode & stat.S_IRUSR)
        writable = bool(mode & stat.S_IWUSR)
        
        print(f"Permiss√µes: readable={readable}, writable={writable}")
        
        if readable and writable:
            print("‚úì Permiss√µes OK")
            return True
        else:
            print("‚úó Permiss√µes insuficientes")
            print("Execute: sudo chmod 666 " + port)
            return False
            
    except Exception as e:
        print(f"Erro verificando permiss√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal de diagn√≥stico"""
    if len(sys.argv) != 2:
        print("Uso: python3 diagnostic_advanced.py <porta_serial>")
        print("Exemplo: python3 diagnostic_advanced.py /dev/ttyUSB0")
        sys.exit(1)
    
    port = sys.argv[1]
    
    print("=== Diagn√≥stico Avan√ßado ESP32 BLE ===")
    print()
    
    # Verifica permiss√µes primeiro
    perm_ok = check_serial_permissions(port)
    print()
    
    if not perm_ok:
        print("Resolva os problemas de permiss√£o antes de continuar")
        return
    
    # Executa diagn√≥stico
    result = diagnose_esp32(port)
    
    print("\n=== Resumo ===")
    if result:
        print("‚úì ESP32 est√° funcionando corretamente")
        print("  Voc√™ pode proceder com os testes de funcionalidade")
    else:
        print("‚úó ESP32 apresenta problemas")
        print("  Verifique:")
        print("  - Se o firmware MicroPython est√° instalado")
        print("  - Se o c√≥digo foi carregado corretamente")
        print("  - Se h√° erros na execu√ß√£o do c√≥digo")

if __name__ == "__main__":
    main()
